{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:block",
  "title": "data-table",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "table",
    "input",
    "button",
    "dropdown-menu",
    "select"
  ],
  "files": [
    {
      "path": "components/ui/table.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/data-table/index.tsx",
      "content": "\"use client\";\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport {\r\n  ColumnDef,\r\n  ColumnFiltersState,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  SortingState,\r\n  useReactTable,\r\n  VisibilityState,\r\n} from \"@tanstack/react-table\";\r\nimport { JSX, useState } from \"react\";\r\nimport { DataTableViewOptions } from \"./dataTableViewOptions\";\r\nimport { DataTablePagination } from \"./dataTablePagination\";\r\n\r\ntype DataTableProps<TData, TValue> = {\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n};\r\n\r\nexport function DataTable<TData, TValue>({\r\n  columns,\r\n  data,\r\n}: DataTableProps<TData, TValue>): JSX.Element {\r\n  const [sorting, setSorting] = useState<SortingState>([]);\r\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\r\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({});\r\n  const [rowSelection, setRowSelection] = useState({});\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    onRowSelectionChange: setRowSelection,\r\n    state: {\r\n      sorting,\r\n      columnFilters,\r\n      columnVisibility,\r\n      rowSelection,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <div className=\"flex h-full w-full flex-col\" dir=\"rtl\">\r\n      <div className=\"flex w-full items-center justify-between gap-4 py-4\">\r\n        <Input\r\n          placeholder=\"جستجو...\"\r\n          value={(table.getColumn(\"email\")?.getFilterValue() as string) ?? \"\"}\r\n          onChange={(event) =>\r\n            table.getColumn(\"email\")?.setFilterValue(event.target.value)\r\n          }\r\n          className=\"max-w-sm\"\r\n        />\r\n        <DataTableViewOptions table={table} />\r\n      </div>\r\n      <Table>\r\n        <TableHeader className=\"sticky top-0\">\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <TableRow key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => {\r\n                return (\r\n                  <TableHead key={header.id}>\r\n                    {header.isPlaceholder\r\n                      ? null\r\n                      : flexRender(\r\n                          header.column.columnDef.header,\r\n                          header.getContext()\r\n                        )}\r\n                  </TableHead>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          ))}\r\n        </TableHeader>\r\n        <TableBody>\r\n          {table.getRowModel().rows?.length ? (\r\n            table.getRowModel().rows.map((row) => (\r\n              <TableRow\r\n                key={row.id}\r\n                data-state={row.getIsSelected() && \"selected\"}\r\n              >\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <TableCell key={cell.id}>\r\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))\r\n          ) : (\r\n            <TableRow>\r\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n                بدون نتیجه .\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\r\n        <DataTablePagination table={table} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/data-table/index.tsx"
    },
    {
      "path": "components/data-table/dataTableViewOptions.tsx",
      "content": "\"use client\";\r\n\r\nimport { Table } from \"@tanstack/react-table\";\r\nimport { Settings2 } from \"lucide-react\";\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { JSX } from \"react\";\r\n\r\ntype DataTableViewOptionsProps<TData> = {\r\n  table: Table<TData>;\r\n};\r\n\r\nexport function DataTableViewOptions<TData>({\r\n  table,\r\n}: DataTableViewOptionsProps<TData>): JSX.Element {\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button variant=\"outline\" size=\"sm\" className=\"hidden h-10 lg:flex\">\r\n          <Settings2 />\r\n          تنظیمات جدول\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"end\" className=\"w-[150px]\">\r\n        {/* <DropdownMenuLabel>Toggle columns</DropdownMenuLabel> */}\r\n        {/* <DropdownMenuSeparator /> */}\r\n        {table\r\n          .getAllColumns()\r\n          .filter(\r\n            (column) =>\r\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide()\r\n          )\r\n          .map((column) => {\r\n            return (\r\n              <DropdownMenuCheckboxItem\r\n                key={column.id}\r\n                className=\"capitalize\"\r\n                checked={column.getIsVisible()}\r\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}\r\n              >\r\n                {column.id}\r\n              </DropdownMenuCheckboxItem>\r\n            );\r\n          })}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/data-table/dataTableViewOptions.tsx"
    },
    {
      "path": "components/data-table/dataTablePagination.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Table } from \"@tanstack/react-table\";\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  ChevronsLeft,\r\n  ChevronsRight,\r\n} from \"lucide-react\";\r\nimport { JSX } from \"react\";\r\n\r\ntype DataTablePaginationProps<TData> = {\r\n  table: Table<TData>;\r\n};\r\n\r\nexport function DataTablePagination<TData>({\r\n  table,\r\n}: DataTablePaginationProps<TData>): JSX.Element {\r\n  return (\r\n    <div className=\"flex w-full items-center justify-between px-2\">\r\n      <div className=\"flex-1 text-sm text-muted-foreground\">\r\n        {table.getFilteredSelectedRowModel().rows.length} از{\" \"}\r\n        {table.getFilteredRowModel().rows.length} ردیف انتخاب شده\r\n      </div>\r\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <p className=\"text-sm font-medium\">ردیف در صفحه</p>\r\n          <Select\r\n            value={`${table.getState().pagination.pageSize}`}\r\n            onValueChange={(value) => {\r\n              table.setPageSize(Number(value));\r\n            }}\r\n          >\r\n            <SelectTrigger className=\"h-8 w-[70px]\">\r\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\r\n            </SelectTrigger>\r\n            <SelectContent side=\"top\">\r\n              {[10, 20, 30, 40, 50].map((pageSize) => (\r\n                <SelectItem key={pageSize} value={`${pageSize}`}>\r\n                  {pageSize}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\r\n          صفحه {table.getState().pagination.pageIndex + 1} از{\" \"}\r\n          {table.getPageCount()}\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\r\n            onClick={() => table.setPageIndex(0)}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to last page</span>\r\n            <ChevronsRight />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"h-8 w-8 p-0\"\r\n            onClick={() => table.previousPage()}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to next page</span>\r\n            <ChevronRight />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"h-8 w-8 p-0\"\r\n            onClick={() => table.nextPage()}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to previous page</span>\r\n            <ChevronLeft />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\r\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to first page</span>\r\n            <ChevronsLeft />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/data-table/dataTablePagination.tsx"
    },
    {
      "path": "components/data-table/dataTableSortComponent.tsx",
      "content": "import { Button } from \"@/components/ui/button\";\r\nimport { Column } from \"@tanstack/react-table\";\r\nimport { ArrowUpDown } from \"lucide-react\";\r\nimport { JSX, ReactNode } from \"react\";\r\ntype Props<TData> = {\r\n  column: Column<TData, unknown>;\r\n  children: ReactNode;\r\n};\r\nfunction SortComponent<TData>({ column, children }: Props<TData>): JSX.Element {\r\n  return (\r\n    <Button\r\n      className=\"w-max px-0\"\r\n      variant=\"ghost\"\r\n      onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\r\n    >\r\n      {children}\r\n      <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default SortComponent;\r\n",
      "type": "registry:component",
      "target": "components/ui/data-table/dataTableSortComponent.tsx"
    }
  ]
}